generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole      @default(FACTORY)
  companyName   String?
  companyType   CompanyType?
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  appeals       Appeal[]
  fraudReports  FraudReport[]
  reviews       Review[]
  sessions      Session[]
  
  // Community Hub Relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  jobs           Job[]
  applications   Application[]
  posts          Post[]
  comments       Comment[]
  reports        Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FraudReport {
  id           String        @id @default(cuid())
  title        String
  description  String
  category     FraudCategory
  severity     SeverityLevel @default(MEDIUM)
  status       ReportStatus  @default(PENDING)
  location     String?
  amount       Float?
  currency     String        @default("USD")
  reportedAt   DateTime      @default(now())
  reviewedAt   DateTime?
  publishedAt  DateTime?
  reporterId   String
  subjectName  String?
  subjectType  CompanyType?
  subjectEmail String?
  appeals      Appeal[]
  evidence     Evidence[]
  reporter     User          @relation(fields: [reporterId], references: [id])
  reviews      Review[]

  @@index([status])
  @@index([category])
  @@index([reportedAt])
}

model Evidence {
  id            String      @id @default(cuid())
  fileName      String
  fileUrl       String
  fileType      String
  fileSize      Int
  uploadedAt    DateTime    @default(now())
  fraudReportId String
  fraudReport   FraudReport @relation(fields: [fraudReportId], references: [id], onDelete: Cascade)
}

model Review {
  id            String       @id @default(cuid())
  status        ReviewStatus @default(PENDING)
  comments      String?
  reviewedAt    DateTime     @default(now())
  fraudReportId String
  reviewerId    String
  fraudReport   FraudReport  @relation(fields: [fraudReportId], references: [id])
  reviewer      User         @relation(fields: [reviewerId], references: [id])
}

model Appeal {
  id            String       @id @default(cuid())
  reason        String
  status        AppealStatus @default(PENDING)
  submittedAt   DateTime     @default(now())
  reviewedAt    DateTime?
  comments      String?
  fraudReportId String
  appellantId   String
  appellant     User         @relation(fields: [appellantId], references: [id])
  fraudReport   FraudReport  @relation(fields: [fraudReportId], references: [id])
}

enum UserRole {
  ADMIN
  FACTORY
  FACTORY_OWNER
  SUPPLIER
  WORKER
  BUYER
  REVIEWER
  GUEST
}

enum CompanyType {
  FACTORY
  SUPPLIER
  BUYER
  BRAND
  RETAILER
}

enum FraudCategory {
  PAYMENT_FRAUD
  QUALITY_FRAUD
  DELIVERY_FRAUD
  DOCUMENT_FRAUD
  CONTRACT_FRAUD
  OTHER
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
  APPEALED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_MORE_INFO
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
}

// Community Hub Models

model Organization {
  id          String   @id @default(cuid())
  name        String
  type        OrganizationType
  description String?  @db.Text
  website     String?
  email       String?
  phone       String?
  address     String?  @db.Text
  country     String   @default("Bangladesh")
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  jobs        Job[]
}

model Job {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  requirements String?  @db.Text
  location     String?
  salary       String?
  employmentType EmploymentType @default(FULL_TIME)
  status       JobStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  authorId       String
  author         User         @relation(fields: [authorId], references: [id])
  applications   Application[]
}

model Application {
  id        String   @id @default(cuid())
  coverLetter String? @db.Text
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobId  String
  job    Job  @relation(fields: [jobId], references: [id])
  userId String
  user   User @relation(fields: [userId], references: [id])

  @@unique([jobId, userId])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  excerpt   String?  @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  postId   String
  post     Post   @relation(fields: [postId], references: [id])
}

model Report {
  id          String      @id @default(cuid())
  subject     String
  details     String      @db.Text
  category    ReportCategory
  status      ReportStatus @default(PENDING)
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

enum OrganizationType {
  FACTORY
  SUPPLIER
  BUYER
  BRAND
  RETAILER
  AUDITOR
  GOVERNMENT
  NGO
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ReportCategory {
  FRAUD_ALERT
  SAFETY_VIOLATION
  LABOR_ISSUE
  QUALITY_CONCERN
  ENVIRONMENTAL
  GENERAL
}
